# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- publish

sast:
  stage: test

include:
- template: Security/SAST.gitlab-ci.yml

.publish:
  image: archlinux:base
  script:
    - pacman -Syu --noconfirm git jre-openjdk-headless
    - export JAVA_HOME=$(dirname $(dirname $(readlink -f $(command -v java))))
    - ./gradlew $module:publishKotlinMultiplatformPublicationToGitLabRepository $module:publishJvmPublicationToGitLabRepository $module:publishJsPublicationToGitLabRepository
  only:
    - main
    - tags

logger:publish:
  extends: [ .publish ]
  variables:
    module: logger

backbone:publish:
  extends: [ .publish ]
  variables:
    module: backbone

.test-jvm:
  image: openjdk:latest
  script:
    - ./gradlew $module:koverReport $module:koverVerify  # implies running the JVM tests
  after_script:
    - mkdir -p test-report-$module
    - mv $module/build/reports/tests/jvmTest test-report-$module/test
    - mv $module/build/reports/kover/project-html test-report-$module/coverage
    - mv $module/build/reports/kover/project-xml/report.xml test-report-$module/coverage.xml
    - values=$(cat test-report-$module/coverage.xml | tail -7 | head -5 | grep 'INSTRUCTION' | cut -d ' ' -f 3,4 | sed 's/missed="//;s/" covered="/ /;s/"\/>//')
    - missed=$(<<<$values cut -d ' ' -f 1)
    - covered=$(<<<$values cut -d ' ' -f 2)
    - echo "Coverage $(($covered * 100 / ($covered + $missed)))%"
  coverage: '/Coverage \d+%/'
  artifacts:
    paths:
      - test-report-$module
    expose_as: 'Test and coverage report'
    reports:
       junit: $module/build/test-results/jvmTest/**.xml
    when: always
  only:
    - merge_requests
    - main
    - tags

.test-jvm-convert-coverage:
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.8
  script:
    - python /opt/cover2cover.py test-report-$module/coverage.xml $CI_PROJECT_DIR/$module/src/main/kotlin/ > cobertura.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  only:
    - merge_requests
    - main
    - tags

logger:test:jvm:
  extends: [ .test-jvm ]
  variables:
    module: logger

logger:convert-coverage:
  extends: [ .test-jvm-convert-coverage ]
  needs:
    - job: logger:test:jvm
      artifacts: true
  variables:
    module: logger

backbone:test:jvm:
  extends: [ .test-jvm ]
  variables:
    module: backbone

backbone:convert-coverage:
  extends: [ .test-jvm-convert-coverage ]
  needs:
    - job: backbone:test:jvm
      artifacts: true
  variables:
    module: backbone

auth:test:jvm:
  extends: [ .test-jvm ]
  variables:
    module: auth

auth:convert-coverage:
  extends: [ .test-jvm-convert-coverage ]
  needs:
    - job: auth:test:jvm
      artifacts: true
  variables:
    module: auth

dokka:
  image: openjdk:latest
  needs: [ ]
  script:
    - ./gradlew dokkaHtmlMultiModule
    - mv build/dokka/htmlMultiModule documentation
  artifacts:
    paths:
      - documentation
    expose_as: "Documentation"

pages:
  image: alpine:latest
  stage: publish
  needs:
    - job: dokka
      artifacts: true
  script:
    - mkdir -p public
    - mv documentation public
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - when: never
